var Slack, slackNotify, usage, util, winston, _, _getTimestamp;

_ = require('lodash');

util = require('util');

winston = require('winston');

slackNotify = require('slack-notify');

usage = require('usage');

Slack = function(options) {
  this.webHookUrl = options.webHookUrl, this.channel = options.channel, this.username = options.username, this.level = options.level, this.pid = options.pid, this.env = options.env, this.app = options.app;
  if (!options.webHookUrl) {
    throw new Error('webHookUrl must be specified');
  }
  this.slack = new slackNotify(this.webHookUrl);
};

util.inherits(Slack, winston.Transport);

winston.transports.Slack = Slack;

Slack.prototype.log = function(level, msg, meta, cb) {
  usage.lookup(this.pid, (function(_this) {
    return function(err, stat) {
      var arrStack, errorStack, paragraph, strStack;
      errorStack = meta.errorStack.trim();
      errorStack = errorStack.replace(/\r?\n|\r/g, '\n');
      arrStack = errorStack.split('\n');
      strStack = '';
      paragraph = false;
      _.forEach(arrStack, function(val, index) {
        val = val.trim();
        if (index === 0 || val.indexOf('.coffee') > -1) {
          return strStack += "`" + val + "`\n";
        } else if (index + 1 < arrStack.length - 1 && arrStack[index + 1].indexOf('.coffee') > -1) {
          if (paragraph) {
            paragraph = false;
            return strStack += "" + val + "```\n";
          } else {
            return strStack += "```" + val + "```\n";
          }
        } else {
          if (!paragraph) {
            paragraph = true;
            return strStack += "```" + val + "\n";
          } else if (index === arrStack.length - 1) {
            return strStack += "" + val + "```\n";
          } else {
            return strStack += "" + val + "\n";
          }
        }
      });
      return _this.slack.send({
        channel: _this.channel,
        username: _this.username,
        text: "*" + msg + "*\n" + strStack,
        icon_emoji: void 0,
        attachments: [
          {
            fields: [
              _this.app ? {
                title: 'AppName',
                value: _this.app,
                short: true
              } : void 0, _this.env ? {
                title: 'EnvName',
                value: _this.env,
                short: true
              } : void 0, stat != null ? {
                title: 'CPU',
                value: "" + stat.cpu + "%",
                short: true
              } : void 0, stat != null ? {
                title: 'MEM',
                value: "" + (stat.memory / (1000 * 1000)) + "mb",
                short: true
              } : void 0, {
                title: 'Timestamp',
                value: _getTimestamp(),
                short: true
              }, level ? {
                title: 'Level',
                value: level,
                short: true
              } : void 0
            ]
          }
        ]
      }, function(err) {
        if (err) {
          cb(err, false);
        }
        return cb(null, true);
      });
    };
  })(this));
};

_getTimestamp = function() {
  var d;
  d = new Date();
  return d.toUTCString();
};

module.exports = Slack;

//# sourceMappingURL=data:application/json;base64,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QUhNLEVBSWtFLFlBQXhFLEdBQUE7QUFBQSxnQkFBRSxLQUFBLEVBQU8sS0FBVDtBQUFBLGdCQUFnQixLQUFBLEVBQU8sRUFBQSxHQUFFLENBQUMsSUFBSSxDQUFDLE1BQUwsR0FBWSxDQUFDLElBQUEsR0FBSyxJQUFOLENBQWIsQ0FBRixHQUEyQixJQUFsRDtBQUFBLGdCQUF1RCxLQUFBLEVBQU8sSUFBOUQ7ZUFBQSxHQUFBLE1BSk0sRUFLTjtBQUFBLGdCQUFFLEtBQUEsRUFBTyxXQUFUO0FBQUEsZ0JBQXNCLEtBQUEsRUFBTyxhQUFBLENBQUEsQ0FBN0I7QUFBQSxnQkFBOEMsS0FBQSxFQUFPLElBQXJEO2VBTE0sRUFNMkMsS0FBakQsR0FBQTtBQUFBLGdCQUFFLEtBQUEsRUFBTyxPQUFUO0FBQUEsZ0JBQWtCLEtBQUEsRUFBTyxLQUF6QjtBQUFBLGdCQUFnQyxLQUFBLEVBQU8sSUFBdkM7ZUFBQSxHQUFBLE1BTk07YUFEVjtXQURXO1NBSmI7T0FERixFQWlCRSxTQUFDLEdBQUQsR0FBQTtBQUNBLFFBQUEsSUFBa0IsR0FBbEI7QUFBQSxVQUFBLEVBQUEsQ0FBRyxHQUFILEVBQVEsS0FBUixDQUFBLENBQUE7U0FBQTtlQUNBLEVBQUEsQ0FBRyxJQUFILEVBQVMsSUFBVCxFQUZBO01BQUEsQ0FqQkYsRUExQmlCO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkIsQ0FBQSxDQURXO0FBQUEsQ0FoQmIsQ0FBQTs7QUFBQSxhQW1FQSxHQUFnQixTQUFBLEdBQUE7QUFDZCxNQUFBLENBQUE7QUFBQSxFQUFBLENBQUEsR0FBUSxJQUFBLElBQUEsQ0FBQSxDQUFSLENBQUE7U0FDQSxDQUFDLENBQUMsV0FBRixDQUFBLEVBRmM7QUFBQSxDQW5FaEIsQ0FBQTs7QUFBQSxNQXdFTSxDQUFDLE9BQVAsR0FBaUIsS0F4RWpCLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJfICAgICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpXG51dGlsICAgICAgICA9IHJlcXVpcmUoJ3V0aWwnKVxud2luc3RvbiAgICAgPSByZXF1aXJlKCd3aW5zdG9uJylcbnNsYWNrTm90aWZ5ID0gcmVxdWlyZSgnc2xhY2stbm90aWZ5JylcbnVzYWdlICAgICAgID0gcmVxdWlyZSgndXNhZ2UnKVxuXG5TbGFjayA9IChvcHRpb25zKSAtPlxuICB7QHdlYkhvb2tVcmwsIEBjaGFubmVsLCBAdXNlcm5hbWUsIEBsZXZlbCwgQHBpZCwgQGVudiwgQGFwcH0gPSBvcHRpb25zXG4gIHRocm93IG5ldyBFcnJvcignd2ViSG9va1VybCBtdXN0IGJlIHNwZWNpZmllZCcpIHVubGVzcyBvcHRpb25zLndlYkhvb2tVcmxcblxuICBAc2xhY2sgPSBuZXcgc2xhY2tOb3RpZnkoQHdlYkhvb2tVcmwpXG4gIHJldHVyblxuXG51dGlsLmluaGVyaXRzIFNsYWNrLCB3aW5zdG9uLlRyYW5zcG9ydFxud2luc3Rvbi50cmFuc3BvcnRzLlNsYWNrID0gU2xhY2tcblxuU2xhY2s6OmxvZyA9IChsZXZlbCwgbXNnLCBtZXRhLCBjYikgLT5cbiAgdXNhZ2UubG9va3VwIEBwaWQsIChlcnIsIHN0YXQpID0+XG4gICAgZXJyb3JTdGFjayA9IChtZXRhLmVycm9yU3RhY2spLnRyaW0oKVxuICAgIGVycm9yU3RhY2sgPSBlcnJvclN0YWNrLnJlcGxhY2UoL1xccj9cXG58XFxyL2csICdcXG4nKVxuICAgIGFyclN0YWNrID0gZXJyb3JTdGFjay5zcGxpdCgnXFxuJylcblxuICAgIHN0clN0YWNrID0gJydcbiAgICBwYXJhZ3JhcGggPSBmYWxzZVxuICAgIF8uZm9yRWFjaCBhcnJTdGFjaywgKHZhbCwgaW5kZXgpIC0+XG4gICAgICB2YWwgPSB2YWwudHJpbSgpXG4gICAgICBpZiBpbmRleCA9PSAwIG9yIHZhbC5pbmRleE9mKCcuY29mZmVlJykgPiAtMVxuICAgICAgICBzdHJTdGFjayArPSBcImAje3ZhbH1gXFxuXCJcbiAgICAgIGVsc2UgaWYgaW5kZXgrMSA8IGFyclN0YWNrLmxlbmd0aC0xIGFuZCBhcnJTdGFja1tpbmRleCsxXS5pbmRleE9mKCcuY29mZmVlJykgPiAtMVxuICAgICAgICBpZiBwYXJhZ3JhcGhcbiAgICAgICAgICBwYXJhZ3JhcGggPSBmYWxzZVxuICAgICAgICAgIHN0clN0YWNrICs9ICBcIiN7dmFsfWBgYFxcblwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzdHJTdGFjayArPSAgXCJgYGAje3ZhbH1gYGBcXG5cIlxuICAgICAgZWxzZVxuICAgICAgICB1bmxlc3MgcGFyYWdyYXBoXG4gICAgICAgICAgcGFyYWdyYXBoID0gdHJ1ZVxuICAgICAgICAgIHN0clN0YWNrICs9IFwiYGBgI3t2YWx9XFxuXCJcbiAgICAgICAgZWxzZSBpZiBpbmRleCA9PSBhcnJTdGFjay5sZW5ndGgtMVxuICAgICAgICAgIHN0clN0YWNrICs9IFwiI3t2YWx9YGBgXFxuXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHN0clN0YWNrICs9IFwiI3t2YWx9XFxuXCJcblxuICAgIEBzbGFjay5zZW5kXG4gICAgICBjaGFubmVsOiAgICBAY2hhbm5lbFxuICAgICAgdXNlcm5hbWU6ICAgQHVzZXJuYW1lXG4gICAgICB0ZXh0OiAgICAgICBcIioje21zZ30qXFxuI3tzdHJTdGFja31cIlxuICAgICAgaWNvbl9lbW9qaTogdW5kZWZpbmVkXG4gICAgICBhdHRhY2htZW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgZmllbGRzOiBbXG4gICAgICAgICAgICB7IHRpdGxlOiAnQXBwTmFtZScsIHZhbHVlOiBAYXBwLCBzaG9ydDogdHJ1ZSB9IGlmIEBhcHBcbiAgICAgICAgICAgIHsgdGl0bGU6ICdFbnZOYW1lJywgdmFsdWU6IEBlbnYsIHNob3J0OiB0cnVlIH0gaWYgQGVudlxuICAgICAgICAgICAgeyB0aXRsZTogJ0NQVScsIHZhbHVlOiBcIiN7c3RhdC5jcHV9JVwiLCBzaG9ydDogdHJ1ZSB9IGlmIHN0YXQ/XG4gICAgICAgICAgICB7IHRpdGxlOiAnTUVNJywgdmFsdWU6IFwiI3tzdGF0Lm1lbW9yeS8oMTAwMCoxMDAwKX1tYlwiLCBzaG9ydDogdHJ1ZSB9IGlmIHN0YXQ/XG4gICAgICAgICAgICB7IHRpdGxlOiAnVGltZXN0YW1wJywgdmFsdWU6IF9nZXRUaW1lc3RhbXAoKSwgc2hvcnQ6IHRydWUgfVxuICAgICAgICAgICAgeyB0aXRsZTogJ0xldmVsJywgdmFsdWU6IGxldmVsLCBzaG9ydDogdHJ1ZSB9IGlmIGxldmVsXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgLCAoZXJyKSAtPlxuICAgICAgY2IoZXJyLCBmYWxzZSkgaWYgZXJyXG4gICAgICBjYihudWxsLCB0cnVlKVxuXG4gIHJldHVyblxuXG5cbl9nZXRUaW1lc3RhbXAgPSAoKSAtPlxuICBkID0gbmV3IERhdGUoKVxuICBkLnRvVVRDU3RyaW5nKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNsYWNrXG4iXX0=