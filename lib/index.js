var Slack, slackNotify, util, winston;

util = require('util');

winston = require('winston');

slackNotify = require('slack-notify');

module.exports = Slack = function(options) {
  this.webHookUrl = options.webHookUrl, this.channel = options.channel, this.username = options.username, this.level = options.level;
  if (!options.webHookUrl) {
    throw new Error('webHookUrl must be specified');
  }
  this.slack = new slackNotify(this.webHookUrl);
};

util.inherits(Slack, winston.Transport);

winston.transports.Slack = Slack;

Slack.prototype.log = function(level, msg, meta, cb) {
  this.slack.send({
    channel: this.channel,
    username: this.username,
    text: "[" + level + "] " + msg,
    icon_emoji: void 0
  }, function(err) {
    if (err) {
      cb(err, false);
    }
    return cb(null, true);
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLGlDQUFBOztBQUFBLElBQUEsR0FBYyxPQUFBLENBQVEsTUFBUixDQUFkLENBQUE7O0FBQUEsT0FDQSxHQUFjLE9BQUEsQ0FBUSxTQUFSLENBRGQsQ0FBQTs7QUFBQSxXQUVBLEdBQWMsT0FBQSxDQUFRLGNBQVIsQ0FGZCxDQUFBOztBQUFBLE1BSU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUEsR0FBUSxTQUFDLE9BQUQsR0FBQTtBQUN2QixFQUFDLElBQUMsQ0FBQSxxQkFBQSxVQUFGLEVBQWMsSUFBQyxDQUFBLGtCQUFBLE9BQWYsRUFBd0IsSUFBQyxDQUFBLG1CQUFBLFFBQXpCLEVBQW1DLElBQUMsQ0FBQSxnQkFBQSxLQUFwQyxDQUFBO0FBQ0EsRUFBQSxJQUFBLENBQUEsT0FBOEQsQ0FBQyxVQUEvRDtBQUFBLFVBQVUsSUFBQSxLQUFBLENBQU0sOEJBQU4sQ0FBVixDQUFBO0dBREE7QUFBQSxFQUdBLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxXQUFBLENBQVksSUFBQyxDQUFBLFVBQWIsQ0FIYixDQUR1QjtBQUFBLENBSnpCLENBQUE7O0FBQUEsSUFXSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLEVBQXFCLE9BQU8sQ0FBQyxTQUE3QixDQVhBLENBQUE7O0FBQUEsT0FZTyxDQUFDLFVBQVUsQ0FBQyxLQUFuQixHQUEyQixLQVozQixDQUFBOztBQUFBLEtBY0ssQ0FBQSxTQUFFLENBQUEsR0FBUCxHQUFhLFNBQUMsS0FBRCxFQUFRLEdBQVIsRUFBYSxJQUFiLEVBQW1CLEVBQW5CLEdBQUE7QUFDWCxFQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUNFO0FBQUEsSUFBQSxPQUFBLEVBQVksSUFBQyxDQUFBLE9BQWI7QUFBQSxJQUNBLFFBQUEsRUFBWSxJQUFDLENBQUEsUUFEYjtBQUFBLElBRUEsSUFBQSxFQUFhLEdBQUEsR0FBRyxLQUFILEdBQVMsSUFBVCxHQUFhLEdBRjFCO0FBQUEsSUFHQSxVQUFBLEVBQVksTUFIWjtHQURGLEVBS0UsU0FBQyxHQUFELEdBQUE7QUFDQSxJQUFBLElBQUcsR0FBSDtBQUNFLE1BQUEsRUFBQSxDQUFHLEdBQUgsRUFBUSxLQUFSLENBQUEsQ0FERjtLQUFBO1dBRUEsRUFBQSxDQUFHLElBQUgsRUFBUyxJQUFULEVBSEE7RUFBQSxDQUxGLENBQUEsQ0FEVztBQUFBLENBZGIsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbInV0aWwgICAgICAgID0gcmVxdWlyZSgndXRpbCcpXG53aW5zdG9uICAgICA9IHJlcXVpcmUoJ3dpbnN0b24nKVxuc2xhY2tOb3RpZnkgPSByZXF1aXJlKCdzbGFjay1ub3RpZnknKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNsYWNrID0gKG9wdGlvbnMpIC0+XG4gIHtAd2ViSG9va1VybCwgQGNoYW5uZWwsIEB1c2VybmFtZSwgQGxldmVsfSA9IG9wdGlvbnNcbiAgdGhyb3cgbmV3IEVycm9yKCd3ZWJIb29rVXJsIG11c3QgYmUgc3BlY2lmaWVkJykgdW5sZXNzIG9wdGlvbnMud2ViSG9va1VybFxuXG4gIEBzbGFjayA9IG5ldyBzbGFja05vdGlmeShAd2ViSG9va1VybClcbiAgcmV0dXJuXG5cbnV0aWwuaW5oZXJpdHMgU2xhY2ssIHdpbnN0b24uVHJhbnNwb3J0XG53aW5zdG9uLnRyYW5zcG9ydHMuU2xhY2sgPSBTbGFja1xuXG5TbGFjazo6bG9nID0gKGxldmVsLCBtc2csIG1ldGEsIGNiKSAtPlxuICBAc2xhY2suc2VuZFxuICAgIGNoYW5uZWw6ICAgIEBjaGFubmVsXG4gICAgdXNlcm5hbWU6ICAgQHVzZXJuYW1lXG4gICAgdGV4dDogICAgICAgXCJbI3tsZXZlbH1dICN7bXNnfVwiXG4gICAgaWNvbl9lbW9qaTogdW5kZWZpbmVkXG4gICwgKGVycikgLT5cbiAgICBpZiBlcnJcbiAgICAgIGNiKGVyciwgZmFsc2UpXG4gICAgY2IobnVsbCwgdHJ1ZSlcblxuICByZXR1cm4iXX0=