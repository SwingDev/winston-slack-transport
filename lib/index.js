var Slack, slackNotify, usage, util, winston, _getTimestamp;

util = require('util');

winston = require('winston');

slackNotify = require('slack-notify');

usage = require('usage');

Slack = function(options) {
  this.webHookUrl = options.webHookUrl, this.channel = options.channel, this.username = options.username, this.level = options.level, this.pid = options.pid, this.env = options.env, this.app = options.app;
  if (!options.webHookUrl) {
    throw new Error('webHookUrl must be specified');
  }
  this.slack = new slackNotify(this.webHookUrl);
};

util.inherits(Slack, winston.Transport);

winston.transports.Slack = Slack;

Slack.prototype.log = function(level, msg, meta, cb) {
  usage.lookup(this.pid, (function(_this) {
    return function(err, stat) {
      return _this.slack.send({
        channel: _this.channel,
        username: _this.username,
        text: "*" + msg + "*\n" + (meta.errorStack.trim()),
        attachments: [
          {
            fields: [
              _this.app ? {
                title: 'AppName',
                value: _this.app,
                short: true
              } : void 0, _this.env ? {
                title: 'EnvName',
                value: _this.env,
                short: true
              } : void 0, stat.cpu ? {
                title: 'CPU',
                value: "" + stat.cpu + "%",
                short: true
              } : void 0, stat.memory ? {
                title: 'MEM',
                value: "" + (stat.memory / (1000 * 1000)) + "mb",
                short: true
              } : void 0, {
                title: 'Timestamp',
                value: _getTimestamp(),
                short: true
              }, level ? {
                title: 'Level',
                value: level,
                short: true
              } : void 0
            ]
          }
        ],
        icon_emoji: void 0
      }, function(err) {
        if (err) {
          cb(err, false);
        }
        return cb(null, true);
      });
    };
  })(this));
};

_getTimestamp = function() {
  var d;
  d = new Date();
  return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
};

module.exports = Slack;

//# sourceMappingURL=data:application/json;base64,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TSxFQUtOO0FBQUEsZ0JBQUUsS0FBQSxFQUFPLFdBQVQ7QUFBQSxnQkFBc0IsS0FBQSxFQUFPLGFBQUEsQ0FBQSxDQUE3QjtBQUFBLGdCQUE4QyxLQUFBLEVBQU8sSUFBckQ7ZUFMTSxFQU0yQyxLQUFqRCxHQUFBO0FBQUEsZ0JBQUUsS0FBQSxFQUFPLE9BQVQ7QUFBQSxnQkFBa0IsS0FBQSxFQUFPLEtBQXpCO0FBQUEsZ0JBQWdDLEtBQUEsRUFBTyxJQUF2QztlQUFBLEdBQUEsTUFOTTthQURWO1dBRFc7U0FIYjtBQUFBLFFBZUEsVUFBQSxFQUFZLE1BZlo7T0FERixFQWlCRSxTQUFDLEdBQUQsR0FBQTtBQUNBLFFBQUEsSUFBRyxHQUFIO0FBQ0UsVUFBQSxFQUFBLENBQUcsR0FBSCxFQUFRLEtBQVIsQ0FBQSxDQURGO1NBQUE7ZUFFQSxFQUFBLENBQUcsSUFBSCxFQUFTLElBQVQsRUFIQTtNQUFBLENBakJGLEVBRGlCO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkIsQ0FBQSxDQURXO0FBQUEsQ0FmYixDQUFBOztBQUFBLGFBd0NBLEdBQWdCLFNBQUEsR0FBQTtBQUNkLE1BQUEsQ0FBQTtBQUFBLEVBQUEsQ0FBQSxHQUFRLElBQUEsSUFBQSxDQUFBLENBQVIsQ0FBQTtTQUNBLENBQUMsQ0FBQyxrQkFBRixDQUFBLENBQUEsR0FBeUIsR0FBekIsR0FBK0IsQ0FBQyxDQUFDLGtCQUFGLENBQUEsRUFGakI7QUFBQSxDQXhDaEIsQ0FBQTs7QUFBQSxNQTZDTSxDQUFDLE9BQVAsR0FBaUIsS0E3Q2pCLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJ1dGlsICAgICAgICA9IHJlcXVpcmUoJ3V0aWwnKVxud2luc3RvbiAgICAgPSByZXF1aXJlKCd3aW5zdG9uJylcbnNsYWNrTm90aWZ5ID0gcmVxdWlyZSgnc2xhY2stbm90aWZ5JylcbnVzYWdlICAgICAgID0gcmVxdWlyZSgndXNhZ2UnKVxuXG5TbGFjayA9IChvcHRpb25zKSAtPlxuICB7QHdlYkhvb2tVcmwsIEBjaGFubmVsLCBAdXNlcm5hbWUsIEBsZXZlbCwgQHBpZCwgQGVudiwgQGFwcH0gPSBvcHRpb25zXG4gIHRocm93IG5ldyBFcnJvcignd2ViSG9va1VybCBtdXN0IGJlIHNwZWNpZmllZCcpIHVubGVzcyBvcHRpb25zLndlYkhvb2tVcmxcblxuICBAc2xhY2sgPSBuZXcgc2xhY2tOb3RpZnkoQHdlYkhvb2tVcmwpXG4gIHJldHVyblxuXG51dGlsLmluaGVyaXRzIFNsYWNrLCB3aW5zdG9uLlRyYW5zcG9ydFxud2luc3Rvbi50cmFuc3BvcnRzLlNsYWNrID0gU2xhY2tcblxuU2xhY2s6OmxvZyA9IChsZXZlbCwgbXNnLCBtZXRhLCBjYikgLT5cbiAgdXNhZ2UubG9va3VwIEBwaWQsIChlcnIsIHN0YXQpID0+XG4gICAgQHNsYWNrLnNlbmRcbiAgICAgIGNoYW5uZWw6ICAgIEBjaGFubmVsXG4gICAgICB1c2VybmFtZTogICBAdXNlcm5hbWVcbiAgICAgIHRleHQ6ICAgICAgIFwiKiN7bXNnfSpcXG4jeyhtZXRhLmVycm9yU3RhY2spLnRyaW0oKX1cIlxuICAgICAgYXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkczogW1xuICAgICAgICAgICAgeyB0aXRsZTogJ0FwcE5hbWUnLCB2YWx1ZTogQGFwcCwgc2hvcnQ6IHRydWUgfSBpZiBAYXBwXG4gICAgICAgICAgICB7IHRpdGxlOiAnRW52TmFtZScsIHZhbHVlOiBAZW52LCBzaG9ydDogdHJ1ZSB9IGlmIEBlbnZcbiAgICAgICAgICAgIHsgdGl0bGU6ICdDUFUnLCB2YWx1ZTogXCIje3N0YXQuY3B1fSVcIiwgc2hvcnQ6IHRydWUgfSBpZiBzdGF0LmNwdVxuICAgICAgICAgICAgeyB0aXRsZTogJ01FTScsIHZhbHVlOiBcIiN7c3RhdC5tZW1vcnkvKDEwMDAqMTAwMCl9bWJcIiwgc2hvcnQ6IHRydWUgfSBpZiBzdGF0Lm1lbW9yeVxuICAgICAgICAgICAgeyB0aXRsZTogJ1RpbWVzdGFtcCcsIHZhbHVlOiBfZ2V0VGltZXN0YW1wKCksIHNob3J0OiB0cnVlIH1cbiAgICAgICAgICAgIHsgdGl0bGU6ICdMZXZlbCcsIHZhbHVlOiBsZXZlbCwgc2hvcnQ6IHRydWUgfSBpZiBsZXZlbFxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgICAgaWNvbl9lbW9qaTogdW5kZWZpbmVkXG4gICAgLCAoZXJyKSAtPlxuICAgICAgaWYgZXJyXG4gICAgICAgIGNiKGVyciwgZmFsc2UpXG4gICAgICBjYihudWxsLCB0cnVlKVxuICByZXR1cm5cblxuX2dldFRpbWVzdGFtcCA9ICgpIC0+XG4gIGQgPSBuZXcgRGF0ZSgpXG4gIGQudG9Mb2NhbGVEYXRlU3RyaW5nKCkgKyAnICcgKyBkLnRvTG9jYWxlVGltZVN0cmluZygpXG5cblxubW9kdWxlLmV4cG9ydHMgPSBTbGFjayJdfQ==