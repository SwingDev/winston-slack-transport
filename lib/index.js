var Slack, Transport, _, _getTimestamp, os, slackNotify, usage;

_ = require('lodash');

Transport = require('winston-transport');

slackNotify = require('slack-notify');

usage = require('usage');

os = require('os');

Slack = class Slack extends Transport {
  constructor(options) {
    super(options);
    ({webHookUrl: this.webHookUrl, channel: this.channel, username: this.username, level: this.level, pid: this.pid, env: this.env, app: this.app} = options);
    if (!options.webHookUrl) {
      throw new Error('webHookUrl must be specified');
    }
    if (!options.pid) {
      throw new Error('pid must be specified');
    }
    this.slack = slackNotify(this.webHookUrl);
    return;
  }

  log(level, msg, meta, cb) {
    usage.lookup(this.pid, (err, stat) => {
      var arrStack, errorStack, fields, jsonKey, jsonValue, metaJson, paragraph, ref, strStack, totalMem, usageCpu, usageMem, usageMemP;
      if (meta.errorStack != null) {
        errorStack = meta.errorStack.trim();
      }
      metaJson = (ref = meta.json) != null ? ref : {};
      msg = `*${msg}*`;
      if (errorStack != null) {
        errorStack = errorStack.replace(/\r?\n|\r/g, '\n');
        arrStack = errorStack.split('\n');
        paragraph = false;
        strStack = _.map(arrStack, function(val, index) {
          val = val.trim();
          if (val.indexOf('.coffee') > -1 || index === 0) {
            return `\`${val}\``;
          } else if (!paragraph) {
            paragraph = true;
            return `\`\`\`${val}`;
          } else if ((arrStack[index + 1] != null) && arrStack[index + 1].indexOf('.coffee') > -1) {
            paragraph = false;
            return `${val}\`\`\``;
          } else if (index === arrStack.length - 1 && paragraph) {
            paragraph = false;
            return `${val}\`\`\``;
          } else {
            paragraph = true;
            return `${val}`;
          }
        }).join('\n');
        msg += `\n${strStack}`;
      }
      usageCpu = stat.cpu;
      usageMem = stat.memory / (1000 * 1000);
      totalMem = os.totalmem() / (1000 * 1000);
      usageMemP = usageMem / totalMem * 100;
      fields = [
        this.app ? {
          title: 'AppName',
          value: this.app,
          short: true
        } : void 0,
        this.env ? {
          title: 'EnvName',
          value: this.env,
          short: true
        } : void 0,
        stat != null ? {
          title: 'CPU',
          value: `${usageCpu.toFixed(2)}%`,
          short: true
        } : void 0,
        stat != null ? {
          title: 'MEM',
          value: `${usageMem.toFixed(2)} / ${totalMem.toFixed(2)} MB (${usageMemP.toFixed(2)}%)`,
          short: true
        } : void 0,
        {
          title: 'Timestamp',
          value: _getTimestamp(),
          short: true
        },
        level ? {
          title: 'Level',
          value: level,
          short: true
        } : void 0
      ];
      for (jsonKey in metaJson) {
        jsonValue = metaJson[jsonKey];
        fields.push({
          title: jsonKey,
          value: jsonValue,
          short: true
        });
      }
      return this.slack.send({
        channel: this.channel,
        username: this.username,
        text: `${msg}`,
        icon_emoji: void 0,
        attachments: [
          {
            fields: fields
          }
        ]
      }, function(err) {
        if (err) {
          return cb(err, false);
        }
        return cb(null, true);
      });
    });
  }

};

_getTimestamp = function() {
  var d;
  d = new Date();
  return d.toUTCString();
};

module.exports = Slack;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2luZGV4LmpzIiwic291cmNlcyI6WyJsaWIvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQUEsYUFBQSxFQUFBLEVBQUEsRUFBQSxXQUFBLEVBQUE7O0FBQUEsQ0FBQSxHQUFjLE9BQUEsQ0FBUSxRQUFSOztBQUNkLFNBQUEsR0FBYyxPQUFBLENBQVEsbUJBQVI7O0FBQ2QsV0FBQSxHQUFjLE9BQUEsQ0FBUSxjQUFSOztBQUNkLEtBQUEsR0FBYyxPQUFBLENBQVEsT0FBUjs7QUFDZCxFQUFBLEdBQWMsT0FBQSxDQUFRLElBQVI7O0FBR1IsUUFBTixNQUFBLE1BQUEsUUFBb0IsVUFBcEI7RUFDRSxXQUFjLENBQUMsT0FBRCxDQUFBO1NBQ1osQ0FBTSxPQUFOO0lBQ0EsQ0FBQSxDQUFFLFlBQUQsSUFBQyxDQUFBLFVBQUYsRUFBZSxTQUFELElBQUMsQ0FBQSxPQUFmLEVBQXlCLFVBQUQsSUFBQyxDQUFBLFFBQXpCLEVBQW9DLE9BQUQsSUFBQyxDQUFBLEtBQXBDLEVBQTRDLEtBQUQsSUFBQyxDQUFBLEdBQTVDLEVBQWtELEtBQUQsSUFBQyxDQUFBLEdBQWxELEVBQXdELEtBQUQsSUFBQyxDQUFBLEdBQXhELENBQUEsR0FBK0QsT0FBL0Q7SUFDQSxLQUF1RCxPQUFPLENBQUMsVUFBL0Q7TUFBQSxNQUFNLElBQUksS0FBSixDQUFVLDhCQUFWLEVBQU47O0lBQ0EsS0FBZ0QsT0FBTyxDQUFDLEdBQXhEO01BQUEsTUFBTSxJQUFJLEtBQUosQ0FBVSx1QkFBVixFQUFOOztJQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsV0FBQSxDQUFZLElBQUMsQ0FBQSxVQUFiO0FBQ1Q7RUFQWTs7RUFTZCxHQUFLLENBQUMsS0FBRCxFQUFRLEdBQVIsRUFBYSxJQUFiLEVBQW1CLEVBQW5CLENBQUE7SUFDSCxLQUFLLENBQUMsTUFBTixDQUFhLElBQUMsQ0FBQSxHQUFkLEVBQW1CLENBQUMsR0FB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REc7O0FBVlA7O0FBMEVBLGFBQUEsR0FBZ0IsUUFBQSxDQUFBLENBQUE7QUFDaEIsTUFBQTtFQUFFLENBQUEsR0FBSSxJQUFJLElBQUosQ0FBQTtTQUNKLENBQUMsQ0FBQyxXQUFGLENBQUE7QUFGYzs7QUFLaEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJfICAgICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5UcmFuc3BvcnQgICA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0JylcbnNsYWNrTm90aWZ5ID0gcmVxdWlyZSgnc2xhY2stbm90aWZ5JylcbnVzYWdlICAgICAgID0gcmVxdWlyZSgndXNhZ2UnKVxub3MgICAgICAgICAgPSByZXF1aXJlKCdvcycpXG5cblxuY2xhc3MgU2xhY2sgZXh0ZW5kcyBUcmFuc3BvcnRcbiAgY29uc3RydWN0b3IgOiAob3B0aW9ucykgLT5cbiAgICBzdXBlcihvcHRpb25zKVxuICAgIHtAd2ViSG9va1VybCwgQGNoYW5uZWwsIEB1c2VybmFtZSwgQGxldmVsLCBAcGlkLCBAZW52LCBAYXBwfSA9IG9wdGlvbnNcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3dlYkhvb2tVcmwgbXVzdCBiZSBzcGVjaWZpZWQnKSB1bmxlc3Mgb3B0aW9ucy53ZWJIb29rVXJsXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwaWQgbXVzdCBiZSBzcGVjaWZpZWQnKSB1bmxlc3Mgb3B0aW9ucy5waWRcblxuICAgIEBzbGFjayA9IHNsYWNrTm90aWZ5IEB3ZWJIb29rVXJsXG4gICAgcmV0dXJuXG5cbiAgbG9nOiAobGV2ZWwsIG1zZywgbWV0YSwgY2IpIC0+XG4gICAgdXNhZ2UubG9va3VwIEBwaWQsIChlcnIsIHN0YXQpID0+XG4gICAgICBlcnJvclN0YWNrID0gKG1ldGEuZXJyb3JTdGFjaykudHJpbSgpIGlmIG1ldGEuZXJyb3JTdGFjaz9cbiAgICAgIG1ldGFKc29uID0gbWV0YS5qc29uID8ge31cbiAgICAgIG1zZyA9IFwiKiN7bXNnfSpcIlxuXG4gICAgICBpZiBlcnJvclN0YWNrP1xuICAgICAgICBlcnJvclN0YWNrID0gZXJyb3JTdGFjay5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnXFxuJylcbiAgICAgICAgYXJyU3RhY2sgPSBlcnJvclN0YWNrLnNwbGl0KCdcXG4nKVxuXG4gICAgICAgIHBhcmFncmFwaCA9IGZhbHNlXG4gICAgICAgIHN0clN0YWNrID0gXy5tYXAoYXJyU3RhY2ssICh2YWwsIGluZGV4KSAtPlxuICAgICAgICAgIHZhbCA9IHZhbC50cmltKClcbiAgICAgICAgICBpZiB2YWwuaW5kZXhPZignLmNvZmZlZScpID4gLTEgb3IgaW5kZXg9PTBcbiAgICAgICAgICAgIHJldHVybiBcImAje3ZhbH1gXCJcbiAgICAgICAgICBlbHNlIGlmIG5vdCBwYXJhZ3JhcGhcbiAgICAgICAgICAgIHBhcmFncmFwaCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiBcImBgYCN7dmFsfVwiXG4gICAgICAgICAgZWxzZSBpZiBhcnJTdGFja1tpbmRleCsxXT8gYW5kIGFyclN0YWNrW2luZGV4KzFdLmluZGV4T2YoJy5jb2ZmZWUnKSA+IC0xXG4gICAgICAgICAgICBwYXJhZ3JhcGggPSBmYWxzZVxuICAgICAgICAgICAgcmV0dXJuIFwiI3t2YWx9YGBgXCJcbiAgICAgICAgICBlbHNlIGlmIGluZGV4ID09IGFyclN0YWNrLmxlbmd0aC0xIGFuZCBwYXJhZ3JhcGhcbiAgICAgICAgICAgIHBhcmFncmFwaCA9IGZhbHNlXG4gICAgICAgICAgICByZXR1cm4gXCIje3ZhbH1gYGBcIlxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmFncmFwaCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiBcIiN7dmFsfVwiXG4gICAgICAgICAgKS5qb2luKCdcXG4nKVxuICAgICAgICBtc2cgKz0gXCJcXG4je3N0clN0YWNrfVwiXG5cbiAgICAgIHVzYWdlQ3B1ID0gc3RhdC5jcHVcbiAgICAgIHVzYWdlTWVtID0gc3RhdC5tZW1vcnkgLyAoMTAwMCoxMDAwKVxuICAgICAgdG90YWxNZW0gPSBvcy50b3RhbG1lbSgpIC8gKDEwMDAqMTAwMClcbiAgICAgIHVzYWdlTWVtUCA9IHVzYWdlTWVtL3RvdGFsTWVtICogMTAwXG5cbiAgICAgIGZpZWxkcyA9IFtcbiAgICAgICAgeyB0aXRsZTogJ0FwcE5hbWUnLCB2YWx1ZTogQGFwcCwgc2hvcnQ6IHRydWUgfSBpZiBAYXBwXG4gICAgICAgIHsgdGl0bGU6ICdFbnZOYW1lJywgdmFsdWU6IEBlbnYsIHNob3J0OiB0cnVlIH0gaWYgQGVudlxuICAgICAgICB7IHRpdGxlOiAnQ1BVJywgdmFsdWU6IFwiI3t1c2FnZUNwdS50b0ZpeGVkKDIpfSVcIiwgc2hvcnQ6IHRydWUgfSBpZiBzdGF0P1xuICAgICAgICB7IHRpdGxlOiAnTUVNJywgdmFsdWU6IFwiI3t1c2FnZU1lbS50b0ZpeGVkKDIpfSAvICN7dG90YWxNZW0udG9GaXhlZCgyKX0gTUIgKCN7dXNhZ2VNZW1QLnRvRml4ZWQoMil9JSlcIiwgc2hvcnQ6IHRydWUgfSBpZiBzdGF0P1xuICAgICAgICB7IHRpdGxlOiAnVGltZXN0YW1wJywgdmFsdWU6IF9nZXRUaW1lc3RhbXAoKSwgc2hvcnQ6IHRydWUgfVxuICAgICAgICB7IHRpdGxlOiAnTGV2ZWwnLCB2YWx1ZTogbGV2ZWwsIHNob3J0OiB0cnVlIH0gaWYgbGV2ZWxcbiAgICAgIF1cblxuICAgICAgZm9yIGpzb25LZXksIGpzb25WYWx1ZSBvZiBtZXRhSnNvblxuICAgICAgICBmaWVsZHMucHVzaCB7IHRpdGxlOiBqc29uS2V5LCB2YWx1ZToganNvblZhbHVlLCBzaG9ydDogdHJ1ZSB9XG5cbiAgICAgIEBzbGFjay5zZW5kXG4gICAgICAgIGNoYW5uZWw6ICAgIEBjaGFubmVsXG4gICAgICAgIHVzZXJuYW1lOiAgIEB1c2VybmFtZVxuICAgICAgICB0ZXh0OiAgICAgICBcIiN7bXNnfVwiXG4gICAgICAgIGljb25fZW1vamk6IHVuZGVmaW5lZFxuICAgICAgICBhdHRhY2htZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZpZWxkczogZmllbGRzXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICAsIChlcnIpIC0+XG4gICAgICAgIHJldHVybiBjYihlcnIsIGZhbHNlKSBpZiBlcnJcbiAgICAgICAgY2IobnVsbCwgdHJ1ZSlcblxuICAgIHJldHVyblxuXG5cbl9nZXRUaW1lc3RhbXAgPSAoKSAtPlxuICBkID0gbmV3IERhdGUoKVxuICBkLnRvVVRDU3RyaW5nKClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNsYWNrXG4iXX0=
