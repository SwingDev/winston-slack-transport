var Slack, os, slackNotify, usage, util, winston, _, _getTimestamp;

_ = require('lodash');

util = require('util');

winston = require('winston');

slackNotify = require('slack-notify');

usage = require('usage');

os = require('os');

Slack = function(options) {
  this.webHookUrl = options.webHookUrl, this.channel = options.channel, this.username = options.username, this.level = options.level, this.pid = options.pid, this.env = options.env, this.app = options.app;
  if (!options.webHookUrl) {
    throw new Error('webHookUrl must be specified');
  }
  if (!options.pid) {
    throw new Error('pid must be specified');
  }
  this.slack = new slackNotify(this.webHookUrl);
};

util.inherits(Slack, winston.Transport);

winston.transports.Slack = Slack;

Slack.prototype.log = function(level, msg, meta, cb) {
  usage.lookup(this.pid, (function(_this) {
    return function(err, stat) {
      var arrStack, errorStack, paragraph, strStack, totalMem, usageCpu, usageMem, usageMemP;
      if (meta.errorStack != null) {
        errorStack = meta.errorStack.trim();
      }
      msg = "*" + msg + "*";
      if (errorStack != null) {
        errorStack = errorStack.replace(/\r?\n|\r/g, '\n');
        arrStack = errorStack.split('\n');
        paragraph = false;
        strStack = _.map(arrStack, function(val, index) {
          val = val.trim();
          if (val.indexOf('.coffee') > -1 || index === 0) {
            return "`" + val + "`";
          } else if (!paragraph) {
            paragraph = true;
            return "```" + val;
          } else if ((arrStack[index + 1] != null) && arrStack[index + 1].indexOf('.coffee') > -1) {
            paragraph = false;
            return "" + val + "```";
          } else if (index === arrStack.length - 1 && paragraph) {
            paragraph = false;
            return "" + val + "```";
          } else {
            paragraph = true;
            return "" + val;
          }
        }).join('\n');
        msg += "\n" + strStack;
      }
      usageCpu = stat.cpu;
      usageMem = stat.memory / (1000 * 1000);
      totalMem = os.totalmem() / (1000 * 1000);
      usageMemP = usageMem / totalMem * 100;
      return _this.slack.send({
        channel: _this.channel,
        username: _this.username,
        text: "" + msg,
        icon_emoji: void 0,
        attachments: [
          {
            fields: [
              _this.app ? {
                title: 'AppName',
                value: _this.app,
                short: true
              } : void 0, _this.env ? {
                title: 'EnvName',
                value: _this.env,
                short: true
              } : void 0, stat != null ? {
                title: 'CPU',
                value: "" + (usageCpu.toFixed(2)) + "%",
                short: true
              } : void 0, stat != null ? {
                title: 'MEM',
                value: "" + (usageMem.toFixed(2)) + " / " + (totalMem.toFixed(2)) + " MB (" + (usageMemP.toFixed(2)) + "%)",
                short: true
              } : void 0, {
                title: 'Timestamp',
                value: _getTimestamp(),
                short: true
              }, level ? {
                title: 'Level',
                value: level,
                short: true
              } : void 0
            ]
          }
        ]
      }, function(err) {
        if (err) {
          cb(err, false);
        }
        return cb(null, true);
      });
    };
  })(this));
};

_getTimestamp = function() {
  var d;
  d = new Date();
  return d.toUTCString();
};

module.exports = Slack;

//# sourceMappingURL=data:application/json;base64,