var Slack, os, slackNotify, usage, util, winston, _, _getTimestamp;

_ = require('lodash');

util = require('util');

winston = require('winston');

slackNotify = require('slack-notify');

usage = require('usage');

os = require('os');

Slack = function(options) {
  this.webHookUrl = options.webHookUrl, this.channel = options.channel, this.username = options.username, this.level = options.level, this.pid = options.pid, this.env = options.env, this.app = options.app;
  if (!options.webHookUrl) {
    throw new Error('webHookUrl must be specified');
  }
  if (!options.pid) {
    throw new Error('pid must be specified');
  }
  this.slack = new slackNotify(this.webHookUrl);
};

util.inherits(Slack, winston.Transport);

winston.transports.Slack = Slack;

Slack.prototype.log = function(level, msg, meta, cb) {
  usage.lookup(this.pid, (function(_this) {
    return function(err, stat) {
      var arrStack, errorStack, paragraph, strStack, totalMem, usageCpu, usageMem, usageMemP;
      if (meta.errorStack != null) {
        errorStack = meta.errorStack.trim();
      }
      msg = "*" + msg + "*";
      if (errorStack != null) {
        errorStack = errorStack.replace(/\r?\n|\r/g, '\n');
        arrStack = errorStack.split('\n');
        paragraph = false;
        strStack = _.map(arrStack, function(val, index) {
          val = val.trim();
          if (val.indexOf('.coffee') > -1 || index === 0) {
            return "`" + val + "`";
          } else if (!paragraph) {
            paragraph = true;
            return "```" + val;
          } else if ((arrStack[index + 1] != null) && arrStack[index + 1].indexOf('.coffee') > -1) {
            paragraph = false;
            return "" + val + "```";
          } else if (index === arrStack.length - 1 && paragraph) {
            paragraph = false;
            return "" + val + "```";
          } else {
            paragraph = true;
            return "" + val;
          }
        }).join('\n');
        msg += "\n" + strStack;
      }
      usageCpu = stat.cpu;
      usageMem = stat.memory / (1000 * 1000);
      totalMem = os.totalmem() / (1000 * 1000);
      usageMemP = usageMem / totalMem * 100;
      return _this.slack.send({
        channel: _this.channel,
        username: _this.username,
        text: "" + msg,
        icon_emoji: void 0,
        attachments: [
          {
            fields: [
              _this.app ? {
                title: 'AppName',
                value: _this.app,
                short: true
              } : void 0, _this.env ? {
                title: 'EnvName',
                value: _this.env,
                short: true
              } : void 0, stat != null ? {
                title: 'CPU',
                value: "" + (usageCpu.toFixed(2)) + "%",
                short: true
              } : void 0, stat != null ? {
                title: 'MEM',
                value: "" + (usageMem.toFixed(2)) + " / " + (totalMem.toFixed(2)) + " MB (" + (usageMemP.toFixed(2)) + "%)",
                short: true
              } : void 0, {
                title: 'Timestamp',
                value: _getTimestamp(),
                short: true
              }, level ? {
                title: 'Level',
                value: level,
                short: true
              } : void 0
            ]
          }
        ]
      }, function(err) {
        if (err) {
          return cb(err, false);
        }
        return cb(null, true);
      });
    };
  })(this));
};

_getTimestamp = function() {
  var d;
  d = new Date();
  return d.toUTCString();
};

module.exports = Slack;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSw4REFBQTs7QUFBQSxDQUFBLEdBQWMsT0FBQSxDQUFRLFFBQVIsQ0FBZCxDQUFBOztBQUFBLElBQ0EsR0FBYyxPQUFBLENBQVEsTUFBUixDQURkLENBQUE7O0FBQUEsT0FFQSxHQUFjLE9BQUEsQ0FBUSxTQUFSLENBRmQsQ0FBQTs7QUFBQSxXQUdBLEdBQWMsT0FBQSxDQUFRLGNBQVIsQ0FIZCxDQUFBOztBQUFBLEtBSUEsR0FBYyxPQUFBLENBQVEsT0FBUixDQUpkLENBQUE7O0FBQUEsRUFLQSxHQUFjLE9BQUEsQ0FBUSxJQUFSLENBTGQsQ0FBQTs7QUFBQSxLQU9BLEdBQVEsU0FBQyxPQUFELEdBQUE7QUFDTixFQUFDLElBQUMsQ0FBQSxxQkFBQSxVQUFGLEVBQWMsSUFBQyxDQUFBLGtCQUFBLE9BQWYsRUFBd0IsSUFBQyxDQUFBLG1CQUFBLFFBQXpCLEVBQW1DLElBQUMsQ0FBQSxnQkFBQSxLQUFwQyxFQUEyQyxJQUFDLENBQUEsY0FBQSxHQUE1QyxFQUFpRCxJQUFDLENBQUEsY0FBQSxHQUFsRCxFQUF1RCxJQUFDLENBQUEsY0FBQSxHQUF4RCxDQUFBO0FBQ0EsRUFBQSxJQUFBLENBQUEsT0FBOEQsQ0FBQyxVQUEvRDtBQUFBLFVBQVUsSUFBQSxLQUFBLENBQU0sOEJBQU4sQ0FBVixDQUFBO0dBREE7QUFFQSxFQUFBLElBQUEsQ0FBQSxPQUF1RCxDQUFDLEdBQXhEO0FBQUEsVUFBVSxJQUFBLEtBQUEsQ0FBTSx1QkFBTixDQUFWLENBQUE7R0FGQTtBQUFBLEVBSUEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLFdBQUEsQ0FBWSxJQUFDLENBQUEsVUFBYixDQUpiLENBRE07QUFBQSxDQVBSLENBQUE7O0FBQUEsSUFlSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLEVBQXFCLE9BQU8sQ0FBQyxTQUE3QixDQWZBLENBQUE7O0FBQUEsT0FnQk8sQ0FBQyxVQUFVLENBQUMsS0FBbkIsR0FBMkIsS0FoQjNCLENBQUE7O0FBQUEsS0FrQkssQ0FBQSxTQUFFLENBQUEsR0FBUCxHQUFhLFNBQUMsS0FBRCxFQUFRLEdBQVIsRUFBYSxJQUFiLEVBQW1CLEVBQW5CLEdBQUE7QUFDWCxFQUFBLEtBQUssQ0FBQyxNQUFOLENBQWEsSUFBQyxDQUFBLEdBQWQsRUFBbUIsQ0FBQSxTQUFBLEtBQUEsR0FBQTtXQUFBLFNBQUMsR0FBRCxFQUFNLElBQU4sR0FBQTtBQUNqQixVQUFBLGtGQUFBO0FBQUEsTUFBQSxJQUF5Qyx1QkFBekM7QUFBQSxRQUFBLFVBQUEsR0FBYyxJQUFJLENBQUMsVUFBVyxDQUFDLElBQWxCLENBQUEsQ0FBYixDQUFBO09BQUE7QUFBQSxNQUNBLEdBQUEsR0FBTyxHQUFBLEdBQUcsR0FBSCxHQUFPLEdBRGQsQ0FBQTtBQUdBLE1BQUEsSUFBRyxrQkFBSDtBQUNFLFFBQUEsVUFBQSxHQUFhLFVBQVUsQ0FBQyxPQUFYLENBQW1CLFdBQW5CLEVBQWdDLElBQWhDLENBQWIsQ0FBQTtBQUFBLFFBQ0EsUUFBQSxHQUFXLFVBQVUsQ0FBQyxLQUFYLENBQWlCLElBQWpCLENBRFgsQ0FBQTtBQUFBLFFBR0EsU0FBQSxHQUFZLEtBSFosQ0FBQTtBQUFBLFFBSUEsUUFBQSxHQUFXLENBQUMsQ0FBQyxHQUFGLENBQU0sUUFBTixFQUFnQixTQUFDLEdBQUQsRUFBTSxLQUFOLEdBQUE7QUFDekIsVUFBQSxHQUFBLEdBQU0sR0FBRyxDQUFDLElBQUosQ0FBQSxDQUFOLENBQUE7QUFDQSxVQUFBLElBQUcsR0FBRyxDQUFDLE9BQUosQ0FBWSxTQUFaLENBQUEsR0FBeUIsQ0FBQSxDQUF6QixJQUErQixLQUFBLEtBQU8sQ0FBekM7QUFDRSxtQkFBUSxHQUFBLEdBQUcsR0FBSCxHQUFPLEdBQWYsQ0FERjtXQUFBLE1BRUssSUFBRyxDQUFBLFNBQUg7QUFDSCxZQUFBLFNBQUEsR0FBWSxJQUFaLENBQUE7QUFDQSxtQkFBUSxLQUFBLEdBQUssR0FBYixDQUZHO1dBQUEsTUFHQSxJQUFHLDZCQUFBLElBQXVCLFFBQVMsQ0FBQSxLQUFBLEdBQU0sQ0FBTixDQUFRLENBQUMsT0FBbEIsQ0FBMEIsU0FBMUIsQ0FBQSxHQUF1QyxDQUFBLENBQWpFO0FBQ0gsWUFBQSxTQUFBLEdBQVksS0FBWixDQUFBO0FBQ0EsbUJBQU8sRUFBQSxHQUFHLEdBQUgsR0FBTyxLQUFkLENBRkc7V0FBQSxNQUdBLElBQUcsS0FBQSxLQUFTLFFBQVEsQ0FBQyxNQUFULEdBQWdCLENBQXpCLElBQStCLFNBQWxDO0FBQ0gsWUFBQSxTQUFBLEdBQVksS0FBWixDQUFBO0FBQ0EsbUJBQU8sRUFBQSxHQUFHLEdBQUgsR0FBTyxLQUFkLENBRkc7V0FBQSxNQUFBO0FBSUgsWUFBQSxTQUFBLEdBQVksSUFBWixDQUFBO0FBQ0EsbUJBQU8sRUFBQSxHQUFHLEdBQVYsQ0FMRztXQVZvQjtRQUFBLENBQWhCLENBZ0JSLENBQUMsSUFoQk8sQ0FnQkYsSUFoQkUsQ0FKWCxDQUFBO0FBQUEsUUFxQkEsR0FBQSxJQUFRLElBQUEsR0FBSSxRQXJCWixDQURGO09BSEE7QUFBQSxNQTJCQSxRQUFBLEdBQVcsSUFBSSxDQUFDLEdBM0JoQixDQUFBO0FBQUEsTUE0QkEsUUFBQSxHQUFXLElBQUksQ0FBQyxNQUFMLEdBQWMsQ0FBQyxJQUFBLEdBQUssSUFBTixDQTVCekIsQ0FBQTtBQUFBLE1BNkJBLFFBQUEsR0FBVyxFQUFFLENBQUMsUUFBSCxDQUFBLENBQUEsR0FBZ0IsQ0FBQyxJQUFBLEdBQUssSUFBTixDQTdCM0IsQ0FBQTtBQUFBLE1BOEJBLFNBQUEsR0FBWSxRQUFBLEdBQVMsUUFBVCxHQUFvQixHQTlCaEMsQ0FBQTthQWdDQSxLQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FDRTtBQUFBLFFBQUEsT0FBQSxFQUFZLEtBQUMsQ0FBQSxPQUFiO0FBQUEsUUFDQSxRQUFBLEVBQVksS0FBQyxDQUFBLFFBRGI7QUFBQSxRQUVBLElBQUEsRUFBWSxFQUFBLEdBQUcsR0FGZjtBQUFBLFFBR0EsVUFBQSxFQUFZLE1BSFo7QUFBQSxRQUlBLFdBQUEsRUFBYTtVQUNYO0FBQUEsWUFDRSxNQUFBLEVBQVE7Y0FDNEMsS0FBQyxDQUFBLEdBQW5ELEdBQUE7QUFBQSxnQkFBRSxLQUFBLEVBQU8sU0FBVDtBQUFBLGdCQUFvQixLQUFBLEVBQU8sS0FBQyxDQUFBLEdBQTVCO0FBQUEsZ0JBQWlDLEtBQUEsRUFBTyxJQUF4QztlQUFBLEdBQUEsTUFETSxFQUU0QyxLQUFDLENBQUEsR0FBbkQsR0FBQTtBQUFBLGdCQUFFLEtBQUEsRUFBTyxTQUFUO0FBQUEsZ0JBQW9CLEtBQUEsRUFBTyxLQUFDLENBQUEsR0FBNUI7QUFBQSxnQkFBaUMsS0FBQSxFQUFPLElBQXhDO2VBQUEsR0FBQSxNQUZNLEVBRzZELFlBQW5FLEdBQUE7QUFBQSxnQkFBRSxLQUFBLEVBQU8sS0FBVDtBQUFBLGdCQUFnQixLQUFBLEVBQU8sRUFBQSxHQUFFLENBQUMsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsQ0FBakIsQ0FBRCxDQUFGLEdBQXVCLEdBQTlDO0FBQUEsZ0JBQWtELEtBQUEsRUFBTyxJQUF6RDtlQUFBLEdBQUEsTUFITSxFQUltSCxZQUF6SCxHQUFBO0FBQUEsZ0JBQUUsS0FBQSxFQUFPLEtBQVQ7QUFBQSxnQkFBZ0IsS0FBQSxFQUFPLEVBQUEsR0FBRSxDQUFDLFFBQVEsQ0FBQyxPQUFULENBQWlCLENBQWpCLENBQUQsQ0FBRixHQUF1QixLQUF2QixHQUEyQixDQUFDLFFBQVEsQ0FBQyxPQUFULENBQWlCLENBQWpCLENBQUQsQ0FBM0IsR0FBZ0QsT0FBaEQsR0FBc0QsQ0FBQyxTQUFTLENBQUMsT0FBVixDQUFrQixDQUFsQixDQUFELENBQXRELEdBQTRFLElBQW5HO0FBQUEsZ0JBQXdHLEtBQUEsRUFBTyxJQUEvRztlQUFBLEdBQUEsTUFKTSxFQUtOO0FBQUEsZ0JBQUUsS0FBQSxFQUFPLFdBQVQ7QUFBQSxnQkFBc0IsS0FBQSxFQUFPLGFBQUEsQ0FBQSxDQUE3QjtBQUFBLGdCQUE4QyxLQUFBLEVBQU8sSUFBckQ7ZUFMTSxFQU0yQyxLQUFqRCxHQUFBO0FBQUEsZ0JBQUUsS0FBQSxFQUFPLE9BQVQ7QUFBQSxnQkFBa0IsS0FBQSxFQUFPLEtBQXpCO0FBQUEsZ0JBQWdDLEtBQUEsRUFBTyxJQUF2QztlQUFBLEdBQUEsTUFOTTthQURWO1dBRFc7U0FKYjtPQURGLEVBaUJFLFNBQUMsR0FBRCxHQUFBO0FBQ0EsUUFBQSxJQUF5QixHQUF6QjtBQUFBLGlCQUFPLEVBQUEsQ0FBRyxHQUFILEVBQVEsS0FBUixDQUFQLENBQUE7U0FBQTtlQUNBLEVBQUEsQ0FBRyxJQUFILEVBQVMsSUFBVCxFQUZBO01BQUEsQ0FqQkYsRUFqQ2lCO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkIsQ0FBQSxDQURXO0FBQUEsQ0FsQmIsQ0FBQTs7QUFBQSxhQTRFQSxHQUFnQixTQUFBLEdBQUE7QUFDZCxNQUFBLENBQUE7QUFBQSxFQUFBLENBQUEsR0FBUSxJQUFBLElBQUEsQ0FBQSxDQUFSLENBQUE7U0FDQSxDQUFDLENBQUMsV0FBRixDQUFBLEVBRmM7QUFBQSxDQTVFaEIsQ0FBQTs7QUFBQSxNQWlGTSxDQUFDLE9BQVAsR0FBaUIsS0FqRmpCLENBQUEiLCJmaWxlIjoibGliL2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXyAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKVxudXRpbCAgICAgICAgPSByZXF1aXJlKCd1dGlsJylcbndpbnN0b24gICAgID0gcmVxdWlyZSgnd2luc3RvbicpXG5zbGFja05vdGlmeSA9IHJlcXVpcmUoJ3NsYWNrLW5vdGlmeScpXG51c2FnZSAgICAgICA9IHJlcXVpcmUoJ3VzYWdlJylcbm9zICAgICAgICAgID0gcmVxdWlyZSgnb3MnKVxuXG5TbGFjayA9IChvcHRpb25zKSAtPlxuICB7QHdlYkhvb2tVcmwsIEBjaGFubmVsLCBAdXNlcm5hbWUsIEBsZXZlbCwgQHBpZCwgQGVudiwgQGFwcH0gPSBvcHRpb25zXG4gIHRocm93IG5ldyBFcnJvcignd2ViSG9va1VybCBtdXN0IGJlIHNwZWNpZmllZCcpIHVubGVzcyBvcHRpb25zLndlYkhvb2tVcmxcbiAgdGhyb3cgbmV3IEVycm9yKCdwaWQgbXVzdCBiZSBzcGVjaWZpZWQnKSB1bmxlc3Mgb3B0aW9ucy5waWRcblxuICBAc2xhY2sgPSBuZXcgc2xhY2tOb3RpZnkoQHdlYkhvb2tVcmwpXG4gIHJldHVyblxuXG51dGlsLmluaGVyaXRzIFNsYWNrLCB3aW5zdG9uLlRyYW5zcG9ydFxud2luc3Rvbi50cmFuc3BvcnRzLlNsYWNrID0gU2xhY2tcblxuU2xhY2s6OmxvZyA9IChsZXZlbCwgbXNnLCBtZXRhLCBjYikgLT5cbiAgdXNhZ2UubG9va3VwIEBwaWQsIChlcnIsIHN0YXQpID0+XG4gICAgZXJyb3JTdGFjayA9IChtZXRhLmVycm9yU3RhY2spLnRyaW0oKSBpZiBtZXRhLmVycm9yU3RhY2s/XG4gICAgbXNnID0gXCIqI3ttc2d9KlwiXG5cbiAgICBpZiBlcnJvclN0YWNrP1xuICAgICAgZXJyb3JTdGFjayA9IGVycm9yU3RhY2sucmVwbGFjZSgvXFxyP1xcbnxcXHIvZywgJ1xcbicpXG4gICAgICBhcnJTdGFjayA9IGVycm9yU3RhY2suc3BsaXQoJ1xcbicpXG5cbiAgICAgIHBhcmFncmFwaCA9IGZhbHNlXG4gICAgICBzdHJTdGFjayA9IF8ubWFwKGFyclN0YWNrLCAodmFsLCBpbmRleCkgLT5cbiAgICAgICAgdmFsID0gdmFsLnRyaW0oKVxuICAgICAgICBpZiB2YWwuaW5kZXhPZignLmNvZmZlZScpID4gLTEgb3IgaW5kZXg9PTBcbiAgICAgICAgICByZXR1cm4gXCJgI3t2YWx9YFwiXG4gICAgICAgIGVsc2UgaWYgbm90IHBhcmFncmFwaFxuICAgICAgICAgIHBhcmFncmFwaCA9IHRydWVcbiAgICAgICAgICByZXR1cm4gXCJgYGAje3ZhbH1cIlxuICAgICAgICBlbHNlIGlmIGFyclN0YWNrW2luZGV4KzFdPyBhbmQgYXJyU3RhY2tbaW5kZXgrMV0uaW5kZXhPZignLmNvZmZlZScpID4gLTFcbiAgICAgICAgICBwYXJhZ3JhcGggPSBmYWxzZVxuICAgICAgICAgIHJldHVybiBcIiN7dmFsfWBgYFwiXG4gICAgICAgIGVsc2UgaWYgaW5kZXggPT0gYXJyU3RhY2subGVuZ3RoLTEgYW5kIHBhcmFncmFwaFxuICAgICAgICAgIHBhcmFncmFwaCA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuIFwiI3t2YWx9YGBgXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHBhcmFncmFwaCA9IHRydWVcbiAgICAgICAgICByZXR1cm4gXCIje3ZhbH1cIlxuICAgICAgICApLmpvaW4oJ1xcbicpXG4gICAgICBtc2cgKz0gXCJcXG4je3N0clN0YWNrfVwiXG5cbiAgICB1c2FnZUNwdSA9IHN0YXQuY3B1XG4gICAgdXNhZ2VNZW0gPSBzdGF0Lm1lbW9yeSAvICgxMDAwKjEwMDApXG4gICAgdG90YWxNZW0gPSBvcy50b3RhbG1lbSgpIC8gKDEwMDAqMTAwMClcbiAgICB1c2FnZU1lbVAgPSB1c2FnZU1lbS90b3RhbE1lbSAqIDEwMFxuXG4gICAgQHNsYWNrLnNlbmRcbiAgICAgIGNoYW5uZWw6ICAgIEBjaGFubmVsXG4gICAgICB1c2VybmFtZTogICBAdXNlcm5hbWVcbiAgICAgIHRleHQ6ICAgICAgIFwiI3ttc2d9XCJcbiAgICAgIGljb25fZW1vamk6IHVuZGVmaW5lZFxuICAgICAgYXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkczogW1xuICAgICAgICAgICAgeyB0aXRsZTogJ0FwcE5hbWUnLCB2YWx1ZTogQGFwcCwgc2hvcnQ6IHRydWUgfSBpZiBAYXBwXG4gICAgICAgICAgICB7IHRpdGxlOiAnRW52TmFtZScsIHZhbHVlOiBAZW52LCBzaG9ydDogdHJ1ZSB9IGlmIEBlbnZcbiAgICAgICAgICAgIHsgdGl0bGU6ICdDUFUnLCB2YWx1ZTogXCIje3VzYWdlQ3B1LnRvRml4ZWQoMil9JVwiLCBzaG9ydDogdHJ1ZSB9IGlmIHN0YXQ/XG4gICAgICAgICAgICB7IHRpdGxlOiAnTUVNJywgdmFsdWU6IFwiI3t1c2FnZU1lbS50b0ZpeGVkKDIpfSAvICN7dG90YWxNZW0udG9GaXhlZCgyKX0gTUIgKCN7dXNhZ2VNZW1QLnRvRml4ZWQoMil9JSlcIiwgc2hvcnQ6IHRydWUgfSBpZiBzdGF0P1xuICAgICAgICAgICAgeyB0aXRsZTogJ1RpbWVzdGFtcCcsIHZhbHVlOiBfZ2V0VGltZXN0YW1wKCksIHNob3J0OiB0cnVlIH1cbiAgICAgICAgICAgIHsgdGl0bGU6ICdMZXZlbCcsIHZhbHVlOiBsZXZlbCwgc2hvcnQ6IHRydWUgfSBpZiBsZXZlbFxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgICwgKGVycikgLT5cbiAgICAgIHJldHVybiBjYihlcnIsIGZhbHNlKSBpZiBlcnJcbiAgICAgIGNiKG51bGwsIHRydWUpXG5cbiAgcmV0dXJuXG5cblxuX2dldFRpbWVzdGFtcCA9ICgpIC0+XG4gIGQgPSBuZXcgRGF0ZSgpXG4gIGQudG9VVENTdHJpbmcoKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2xhY2tcbiJdfQ==