var _, assert, chai, expect, fs, parsedError, path, rawError, sandbox, sinon, sinonChai, slackOptions, testLevels, testTypes, winston, winstonSlack, winstonSlackClass;

_ = require('lodash');

fs = require('fs');

chai = require('chai');

path = require('path');

sinon = require('sinon');

sinonChai = require('sinon-chai');

assert = chai.assert;

expect = chai.expect;

chai.use(sinonChai);

winston = require('winston');

winstonSlackClass = require('../lib');

rawError = fs.readFileSync('./test/sample_error_raw.txt', 'utf8');

parsedError = fs.readFileSync('./test/sample_error_parsed.txt', 'utf8');

//all options is random
slackOptions = {
  webHookUrl: 'https://hooks.slack.com/services/F0U7KcIg6wtFTmUi7ZwWDG9fmchnt2u40wEgW5xai9o4',
  channel: '#samplechannel',
  username: 'ErrorBot',
  level: 'error',
  pid: process.pid,
  app: path.basename(process.argv[1], '.js')
};

winstonSlack = new winstonSlackClass(slackOptions);

testTypes = ['normal', 'errorParsing'];

testLevels = function(levels, transport, assertMsg, testType) {
  var tests;
  tests = [];
  Object.keys(levels).forEach(function(level, index) {
    return tests.push({
      name: `${assertMsg} with the '${level}' level`,
      fn: function(done) {
        var logOptions, sendOptions;
        if (testType == null) {
          testType = 'normal';
        }
        logOptions = {};
        logOptions.level = level;
        logOptions.msg = 'test message';
        logOptions.meta = {};
        if (testType === 'errorParsing') {
          logOptions.meta = {
            errorStack: rawError
          };
        }
        sendOptions = {};
        sendOptions.channel = slackOptions.channel;
        sendOptions.username = slackOptions.username;
        sendOptions.text = `*${logOptions.msg}*`;
        if (testType === 'errorParsing') {
          sendOptions.text = `*${logOptions.msg}*\n${parsedError}`;
        }
        return transport.log(logOptions.level, logOptions.msg, logOptions.meta, function(err) {
          var sendLastCall;
          expect(transport.log).to.have.been.calledWith(logOptions.level, logOptions.msg, logOptions.meta);
          if (testType === 'normal') {
            expect(transport.log.callCount).to.equal(index + 1);
            expect(transport.slack.send.callCount).to.equal(index + 1);
          }
          // get args from slack.send
          sendLastCall = transport.slack.send.lastCall;
          expect(sendLastCall.args[0].channel).to.equal(sendOptions.channel);
          expect(sendLastCall.args[0].username).to.equal(sendOptions.username);
          expect(sendLastCall.args[0].text).to.equal(sendOptions.text);
          sendLastCall.args[0].attachments[0].fields.forEach(function(field) {
            if (field != null) {
              return expect(field).to.contain.keys(['title', 'value']);
            }
          });
          return done();
        });
      }
    });
  });
  return tests;
};

sandbox = sinon.createSandbox();

/* */
// TESTS
describe('winston-slack-transport tests', function() {
  before(function() {
    sandbox.spy(winstonSlack.slack, 'send');
    return sandbox.spy(winstonSlack, 'log');
  });
  describe('levels tests', function() {
    var arrErrorParsingLevels, arrTestLevels, i, j, len, len1, results, test;
    before(function() {
      return sandbox.stub(winstonSlack.slack, 'request').callsFake(function(data, done) {
        return done();
      });
    });
    after(function() {
      return sandbox.restore();
    });
    //(winstonSlack.slack).request.restore()
    arrTestLevels = testLevels(winston.config.npm.levels, winstonSlack, 'Should respond and pass variables');
    for (i = 0, len = arrTestLevels.length; i < len; i++) {
      test = arrTestLevels[i];
      it(test.name, test.fn);
    }
    arrErrorParsingLevels = testLevels(winston.config.npm.levels, winstonSlack, 'Should respond, pass variables and parse error stack', 'errorParsing');
    results = [];
    for (j = 0, len1 = arrErrorParsingLevels.length; j < len1; j++) {
      test = arrErrorParsingLevels[j];
      results.push(it(test.name, test.fn));
    }
    return results;
  });
  return describe('common tests', function() {
    var response;
    response = {};
    response.body = '';
    before(function() {
      return sandbox.stub(winstonSlack.slack, 'request').callsFake(function(data, done) {
        if (response.body !== 'ok') {
          return done(new Error(response.body));
        }
        return done();
      });
    });
    after(function() {
      return winstonSlack.slack.request.restore();
    });
    it('Should be instance of winston-slack-transport', function(done) {
      assert.instanceOf(winstonSlack, winstonSlackClass);
      assert.isFunction(winstonSlack.log);
      return done();
    });
    it('Should throw error if webHookUrl not specified', function(done) {
      var options;
      options = _.clone(slackOptions, true);
      options.webHookUrl = void 0;
      expect(function() {
        new winstonSlackClass(options);
      }).to.throw(Error);
      return done();
    });
    it('Should throw error if pid not specified', function(done) {
      var options;
      options = _.clone(slackOptions, true);
      options.pid = void 0;
      expect(function() {
        new winstonSlackClass(options);
      }).to.throw(Error);
      return done();
    });
    it('Should response with "ok" if message successfully send', function(done) {
      response.body = 'ok';
      return winstonSlack.log('error', 'test message', {}, function(err, send) {
        expect(send).to.be.ok;
        return done();
      });
    });
    return it('Should response with "[ErrorSlack]" if message not send (connection problem)', function(done) {
      response.body = '[ErrorSlack]';
      return winstonSlack.log('error', 'test message', {}, function(err, send) {
        expect(send).to.not.be.ok;
        return done();
      });
    });
  });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
