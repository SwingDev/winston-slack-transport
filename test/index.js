var assert, chai, chaiThings, expect, fs, parsedError, path, rawError, sinon, sinonChai, slackNotify, slackOptions, testLevels, testTypes, winston, winstonSlack, winstonSlackClass, _;

_ = require('lodash');

fs = require('fs');

chai = require('chai');

path = require('path');

sinon = require('sinon');

sinonChai = require('sinon-chai');

chaiThings = require('chai-things');

assert = chai.assert;

expect = chai.expect;

chai.use(sinonChai);

chai.use(chaiThings);

winston = require('winston');

slackNotify = require('slack-notify');

winstonSlackClass = require('../lib');

rawError = fs.readFileSync('./test/sample_error_raw.txt', 'utf8');

parsedError = fs.readFileSync('./test/sample_error_parsed.txt', 'utf8');

slackOptions = {
  webHookUrl: 'https://hooks.slack.com/services/F0U7KcIg6wtFTmUi7ZwWDG9fmchnt2u40wEgW5xai9o4',
  channel: '#samplechannel',
  username: 'ErrorBot',
  level: 'error',
  pid: process.pid,
  app: path.basename(process.argv[1], '.js')
};

winstonSlack = new winstonSlackClass(slackOptions);

testTypes = ['normal', 'errorParsing'];

testLevels = function(levels, transport, assertMsg, testType) {
  var tests;
  tests = [];
  Object.keys(levels).forEach(function(level, index) {
    return tests.push({
      name: "" + assertMsg + " with the '" + level + "' level",
      fn: function(done) {
        var logOptions, sendOptions;
        if (testType == null) {
          testType = 'normal';
        }
        logOptions = {};
        logOptions.level = level;
        logOptions.msg = 'test message';
        logOptions.meta = {};
        if (testType === 'errorParsing') {
          logOptions.meta = {
            errorStack: rawError
          };
        }
        sendOptions = {};
        sendOptions.channel = slackOptions.channel;
        sendOptions.username = slackOptions.username;
        sendOptions.text = "*" + logOptions.msg + "*";
        if (testType === 'errorParsing') {
          sendOptions.text = "*" + logOptions.msg + "*\n" + parsedError;
        }
        return transport.log(logOptions.level, logOptions.msg, logOptions.meta, function(err) {
          var sendLastCall;
          expect(transport.log).to.have.been.calledWith(logOptions.level, logOptions.msg, logOptions.meta);
          if (testType === 'normal') {
            expect(transport.log.callCount).to.equal(index + 1);
            expect(transport.slack.send.callCount).to.equal(index + 1);
          }
          sendLastCall = transport.slack.send.lastCall;
          expect(sendLastCall.args[0].channel).to.equal(sendOptions.channel);
          expect(sendLastCall.args[0].username).to.equal(sendOptions.username);
          expect(sendLastCall.args[0].text).to.equal(sendOptions.text);
          sendLastCall.args[0].attachments[0].fields.forEach(function(field) {
            if (field != null) {
              return expect(field).to.contain.keys(['title', 'value']);
            }
          });
          return done();
        });
      }
    });
  });
  return tests;
};


/* */

describe('Winston-slack-transport', function() {
  var arrErrorParsingLevels, arrTestLevels, test, _i, _j, _len, _len1, _results;
  before(function() {
    sinon.stub(winstonSlack.slack, 'request', function(data, done) {
      return done();
    });
    sinon.spy(winstonSlack.slack, 'send');
    return sinon.spy(winstonSlack, 'log');
  });
  after(function() {
    winstonSlack.slack.request.restore();
  });
  it('Should be instance of winston-slack-transport', function(done) {
    assert.instanceOf(winstonSlack, winstonSlackClass);
    assert.isFunction(winstonSlack.log);
    return done();
  });
  it('Should throw error if webHookUrl not specified', function(done) {
    var options;
    options = _.clone(slackOptions, true);
    options.webHookUrl = void 0;
    expect(function() {
      new winstonSlackClass(options);
    }).to["throw"](Error);
    return done();
  });
  it('Should throw error if pid not specified', function(done) {
    var options;
    options = _.clone(slackOptions, true);
    options.pid = void 0;
    expect(function() {
      new winstonSlackClass(options);
    }).to["throw"](Error);
    return done();
  });
  arrTestLevels = testLevels(winston.config.npm.levels, winstonSlack, 'Should respond and pass variables');
  for (_i = 0, _len = arrTestLevels.length; _i < _len; _i++) {
    test = arrTestLevels[_i];
    it(test.name, test.fn);
  }
  arrErrorParsingLevels = testLevels(winston.config.npm.levels, winstonSlack, 'Should respond, pass variables and parse error stack', 'errorParsing');
  _results = [];
  for (_j = 0, _len1 = arrErrorParsingLevels.length; _j < _len1; _j++) {
    test = arrErrorParsingLevels[_j];
    _results.push(it(test.name, test.fn));
  }
  return _results;
});

//# sourceMappingURL=data:application/json;base64,